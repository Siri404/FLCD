Language Specification

Language Definition:
 	Alphabet:
  		a. Upper (A-Z) and lower case letters (a-z) of the English alphabet
    	b. Underline character '_';
    	c. Decimal digits (0-9);
    Lexicon:
    	a.Special symbols, representing:
		 	-operators:
		 		+ - * / = < > <= == != >= and or
		 	-separators:
		 		( ) [ ] { } , ; space
		 	-reserved words:
		    	while if else int string ArrayList read write
    	b.identifiers
		    -a sequence of letters and  digits, such that the first character is a letter; the rule is:
			    identifier = letter{letter|digit}
			    letter = "a" | "b" |...| "z" |...|"A" | "B" |...| "Z"
			    digit = "0" | "1" |...| "9"
        c.constants

    Rules:
		1.integer:
		    non-zero = "1" | "2" |...| "9"
		    integer = ["-"|"+"]non_zero{digit} | "0"
		2.string:
		    string = "'"{char}"'"
		    char = letter | digit
		3.ArrayList:
			ArrayList =  "["[string{","string}]"]" | "["[int{","int}]"]"

	Syntax
		The words - predefined tokens are specified between " and ":
		a) Syntactic rules:
		    program = "~Start"stmtlist"~End"
		   decllist = declaration{"," declaration}";"
		declaration = type IDENTIFIER
		      type1 = "int" | "string"
		  arraydecl = "ArrayList<"type1">"
		      type  = type1|arraydecl
		   stmtlist = stmt{stmt}
		       stmt = simplstmt | structstmt
		  simplstmt = assignstmt | iostmt | decllist
		 assignstmt = IDENTIFIER["["pos_integer"]"] "=" expression";"
		pos_integer = non_zero{digit} | "0"
		 expression = expression ("+"|"-") term | term
		       term = term ("*"|"/") factor | factor
		     factor = "(" expression ")" | IDENTIFIER | CONSTANT
		     iostmt = ("read"|"write") "("IDENTIFIER")"";"
		 structstmt = ifstmt | whilestmt
		     ifstmt = "if" "("condition")" "{"stmtlist"}" ["else" "{"stmtlist"}"]
		  whilestmt = "while" "("condition")" "{"stmtlist"}"
		  condition = expression RELATION expression
		b) lexical rules:
		 IDENTIFIER = letter | letter{letter|digit}
		     letter = "a" | "b" |...| "z" |...| "A" | "B" |...| "Z"
		      digit = "0" | "1" |...| "9"
		   RELATION = "<" | "<=" | "==" | "!=" | ">=" | ">" | "and" | "or"


	Codification:
-------------------------
| Token type	|  code |
-------------------------
| identifier	|    0  |
-------------------------
| constant	    |    1  |
-------------------------
| int	        |    2  |
-------------------------
| string		|    3  |
-------------------------
| ArrayList		|    4  |
-------------------------
| read			|    5  |
-------------------------
| write			|    6  |
-------------------------
| if		    |    7  |
-------------------------
| else      	|    8  |
-------------------------
| while			|    9  |
-------------------------
| space			|   10  |
-------------------------
| ;		        |   11  |
-------------------------
| ,          	|   12  |
-------------------------
| (		        |   13  |
-------------------------
| )		        |   14  |
-------------------------
| [		        |   15  |
-------------------------
| ]     	    |   16  |
-------------------------
| {				|   17  |
-------------------------
| }				|   18  |
-------------------------
| +		        |   19  |
-------------------------
| * 		    |   20  |
-------------------------
| -		        |   21  |
-------------------------
| /				|   22  |
-------------------------
| <         	|   23  |
-------------------------
| >		        |   24  |
-------------------------
| >=			|   25  |
-------------------------
| <=			|   26  |
-------------------------
| ==	        |   27  |
-------------------------
| !=			|   28  |
-------------------------
| = 		    |   29  |
-------------------------
| and 		    |   30  |
-------------------------
| or 		    |   31  |
-------------------------
| ~Start       |   32  |
-------------------------
| ~End		    |   33  |
-------------------------
